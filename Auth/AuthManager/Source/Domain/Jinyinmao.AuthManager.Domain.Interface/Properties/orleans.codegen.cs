//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 414
#pragma warning disable 649
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace Jinyinmao.AuthManager.Domain.Interface
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using Orleans;
    using Orleans.Runtime;
    using Jinyinmao.AuthManager.Domain.Interface.Dtos;
    using System.Collections;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UserFactory
    {
        

            public static IUser Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return UserReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Jinyinmao.AuthManager.Domain.Interface.IUser")]
        internal class UserReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Jinyinmao.AuthManager.Domain.Interface.IUser
        {
            

            public static IUser Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IUser) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IUser), (global::Orleans.Runtime.GrainReference gr) => { return new UserReference(gr);}, grainRef, -1624359270);
            }
            
            protected internal UserReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal UserReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1624359270;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Jinyinmao.AuthManager.Domain.Interface.IUser";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                UserReference input = ((UserReference)(original));
                return ((UserReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                UserReference input = ((UserReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return UserReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return UserMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.AdminCancelAccountAsync(Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount @command)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(1593944754, new object[] {@command} );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUser.BindWeChatAsync(string @openId)
            {

                return base.InvokeMethodAsync<object>(633621671, new object[] {@openId} );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.ChangeLoginCellphoneAsync(Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone @command)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(479035855, new object[] {@command} );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult> Jinyinmao.AuthManager.Domain.Interface.IUser.CheckPasswordAsync(string @loginName, string @password)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult>(-1723407494, new object[] {@loginName, @password} );
            }
            
            System.Threading.Tasks.Task<bool> Jinyinmao.AuthManager.Domain.Interface.IUser.CheckPasswordAsync(string @password)
            {

                return base.InvokeMethodAsync<System.Boolean>(1446235673, new object[] {@password} );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUser.DumpUserToDBAsync()
            {

                return base.InvokeMethodAsync<object>(-1138040909, null );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUser.DumpUserToMemoryAsync()
            {

                return base.InvokeMethodAsync<object>(-479430202, null );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.GetUserInfoAsync()
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(-390757202, null );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.GetWeChatBindInfoById()
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo>(-2122532023, null );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.LockAsync()
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(-329055841, null );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.RegisterAsync(Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister @command)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(1545947866, new object[] {@command} );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUser.ReloadAsync()
            {

                return base.InvokeMethodAsync<object>(1656425842, null );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.ResetCellphoneAsync(Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone @command)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(-535583745, new object[] {@command} );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.ResetLoginPasswordAsync(Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword @command)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(405897552, new object[] {@command} );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.SetLoginPasswordAsync(Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword @command)
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(194305843, new object[] {@command} );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUser.SyncUserAsync()
            {

                return base.InvokeMethodAsync<object>(-152084287, null );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUser.UnbindWeChatAsync()
            {

                return base.InvokeMethodAsync<object>(1198671230, null );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo> Jinyinmao.AuthManager.Domain.Interface.IUser.UnlockAsync()
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo>(-2131817909, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Jinyinmao.AuthManager.Domain.Interface.IUser", -1624359270)]
    internal class UserMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1624359270;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1624359270:  // IUser
                        switch (methodId)
                        {
                            case 1593944754: 
                                return ((IUser)grain).AdminCancelAccountAsync((Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 633621671: 
                                return ((IUser)grain).BindWeChatAsync((System.String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 479035855: 
                                return ((IUser)grain).ChangeLoginCellphoneAsync((Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1723407494: 
                                return ((IUser)grain).CheckPasswordAsync((System.String)arguments[0], (System.String)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1446235673: 
                                return ((IUser)grain).CheckPasswordAsync((System.String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1138040909: 
                                return ((IUser)grain).DumpUserToDBAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -479430202: 
                                return ((IUser)grain).DumpUserToMemoryAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -390757202: 
                                return ((IUser)grain).GetUserInfoAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -2122532023: 
                                return ((IUser)grain).GetWeChatBindInfoById().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -329055841: 
                                return ((IUser)grain).LockAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1545947866: 
                                return ((IUser)grain).RegisterAsync((Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1656425842: 
                                return ((IUser)grain).ReloadAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -535583745: 
                                return ((IUser)grain).ResetCellphoneAsync((Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 405897552: 
                                return ((IUser)grain).ResetLoginPasswordAsync((Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 194305843: 
                                return ((IUser)grain).SetLoginPasswordAsync((Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -152084287: 
                                return ((IUser)grain).SyncUserAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 1198671230: 
                                return ((IUser)grain).UnbindWeChatAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -2131817909: 
                                return ((IUser)grain).UnlockAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1624359270:  // IUser
                    switch (methodId)
                    {
                        case 1593944754:
                            return "AdminCancelAccountAsync";
                    case 633621671:
                            return "BindWeChatAsync";
                    case 479035855:
                            return "ChangeLoginCellphoneAsync";
                    case -1723407494:
                            return "CheckPasswordAsync";
                    case 1446235673:
                            return "CheckPasswordAsync";
                    case -1138040909:
                            return "DumpUserToDBAsync";
                    case -479430202:
                            return "DumpUserToMemoryAsync";
                    case -390757202:
                            return "GetUserInfoAsync";
                    case -2122532023:
                            return "GetWeChatBindInfoById";
                    case -329055841:
                            return "LockAsync";
                    case 1545947866:
                            return "RegisterAsync";
                    case 1656425842:
                            return "ReloadAsync";
                    case -535583745:
                            return "ResetCellphoneAsync";
                    case 405897552:
                            return "ResetLoginPasswordAsync";
                    case 194305843:
                            return "SetLoginPasswordAsync";
                    case -152084287:
                            return "SyncUserAsync";
                    case 1198671230:
                            return "UnbindWeChatAsync";
                    case -2131817909:
                            return "UnlockAsync";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class UserRelationGrainFactory
    {
        

            public static IUserRelationGrain Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return UserRelationGrainReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain")]
        internal class UserRelationGrainReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain
        {
            

            public static IUserRelationGrain Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (IUserRelationGrain) global::Orleans.Runtime.GrainReference.CastInternal(typeof(IUserRelationGrain), (global::Orleans.Runtime.GrainReference gr) => { return new UserRelationGrainReference(gr);}, grainRef, 1173785308);
            }
            
            protected internal UserRelationGrainReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal UserRelationGrainReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1173785308;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                UserRelationGrainReference input = ((UserRelationGrainReference)(original));
                return ((UserRelationGrainReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                UserRelationGrainReference input = ((UserRelationGrainReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return UserRelationGrainReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return ((interfaceId == this.InterfaceId) 
                            || (interfaceId == -1277021679));
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return UserRelationGrainMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.BindCellphoneAsync(string @userIdentifier)
            {

                return base.InvokeMethodAsync<object>(632852905, new object[] {@userIdentifier} );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.BindWeChatAsync(string @userIdentifier)
            {

                return base.InvokeMethodAsync<object>(633621671, new object[] {@userIdentifier} );
            }
            
            System.Threading.Tasks.Task<Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult> Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.CheckCellphoneAsync()
            {

                return base.InvokeMethodAsync<Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult>(418084067, null );
            }
            
            System.Threading.Tasks.Task<string> Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.DumpUserRelationToDBAsync()
            {

                return base.InvokeMethodAsync<System.String>(1490457566, null );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.DumpUserRelationToMemoryAsync()
            {

                return base.InvokeMethodAsync<object>(-220351528, null );
            }
            
            System.Threading.Tasks.Task<string> Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.GetUserIdentifierAsync()
            {

                return base.InvokeMethodAsync<System.String>(963305379, null );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.ReloadAsync()
            {

                return base.InvokeMethodAsync<object>(1656425842, null );
            }
            
            System.Threading.Tasks.Task Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain.UnregisterAsync()
            {

                return base.InvokeMethodAsync<object>(-507305401, null );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("Jinyinmao.AuthManager.Domain.Interface.IUserRelationGrain", 1173785308)]
    internal class UserRelationGrainMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1173785308;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1173785308:  // IUserRelationGrain
                        switch (methodId)
                        {
                            case 632852905: 
                                return ((IUserRelationGrain)grain).BindCellphoneAsync((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 633621671: 
                                return ((IUserRelationGrain)grain).BindWeChatAsync((String)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 418084067: 
                                return ((IUserRelationGrain)grain).CheckCellphoneAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1490457566: 
                                return ((IUserRelationGrain)grain).DumpUserRelationToDBAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -220351528: 
                                return ((IUserRelationGrain)grain).DumpUserRelationToMemoryAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case 963305379: 
                                return ((IUserRelationGrain)grain).GetUserIdentifierAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1656425842: 
                                return ((IUserRelationGrain)grain).ReloadAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -507305401: 
                                return ((IUserRelationGrain)grain).UnregisterAsync().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }case -1277021679:  // IGrainWithStringKey
                        switch (methodId)
                        {
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1173785308:  // IUserRelationGrain
                    switch (methodId)
                    {
                        case 632852905:
                            return "BindCellphoneAsync";
                    case 633621671:
                            return "BindWeChatAsync";
                    case 418084067:
                            return "CheckCellphoneAsync";
                    case 1490457566:
                            return "DumpUserRelationToDBAsync";
                    case -220351528:
                            return "DumpUserRelationToMemoryAsync";
                    case 963305379:
                            return "GetUserIdentifierAsync";
                    case 1656425842:
                            return "ReloadAsync";
                    case -507305401:
                            return "UnregisterAsync";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }
                case -1277021679:  // IGrainWithStringKey
                    switch (methodId)
                    {
                        
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
}
namespace Jinyinmao.AuthManager.Domain.InterfaceSerializers
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using Jinyinmao.AuthManager.Domain.Interface.Dtos;
    using Jinyinmao.AuthManager.Domain.Interface.Commands;
    using System.Collections;
    using System.Runtime.Serialization;
    using System.Runtime.InteropServices;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Dtos_UserInfoSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Dtos_UserInfoSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo input = ((Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Cellphone, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Closed, stream, typeof(bool));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ContractId, stream, typeof(long));
            Orleans.Serialization.SerializationManager.SerializeInner(input.HasSetPassword, stream, typeof(bool));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Info, stream, typeof(System.Collections.Generic.Dictionary<System.String,System.Object>));
            Orleans.Serialization.SerializationManager.SerializeInner(input.InviteBy, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.InviteFor, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.LastModified, stream, typeof(System.DateTime));
            Orleans.Serialization.SerializationManager.SerializeInner(input.LoginNames, stream, typeof(System.Collections.Generic.List<System.String>));
            Orleans.Serialization.SerializationManager.SerializeInner(input.OutletCode, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.PasswordErrorCount, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RegisterTime, stream, typeof(System.DateTime));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserId, stream, typeof(System.Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo result = new Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo();
            result.Cellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Closed = ((bool)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(bool), stream)));
            result.ContractId = ((long)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(long), stream)));
            result.HasSetPassword = ((bool)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(bool), stream)));
            result.Info = ((System.Collections.Generic.Dictionary<System.String,System.Object>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Collections.Generic.Dictionary<System.String,System.Object>), stream)));
            result.InviteBy = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.InviteFor = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.LastModified = ((System.DateTime)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.DateTime), stream)));
            result.LoginNames = ((System.Collections.Generic.List<System.String>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Collections.Generic.List<System.String>), stream)));
            result.OutletCode = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.PasswordErrorCount = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.RegisterTime = ((System.DateTime)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.DateTime), stream)));
            result.UserId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Dtos.UserInfo), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Commands_AdminCancelAccountSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Commands_AdminCancelAccountSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount input = ((Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Cellphone, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.EntityId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserId, stream, typeof(System.Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount result = new Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount();
            result.Cellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.CommandId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.EntityId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.UserId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Commands.AdminCancelAccount), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Commands_ChangeLoginCellphoneSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Commands_ChangeLoginCellphoneSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone input = ((Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.EntityId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.LoginCellphone, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.NewCellphone, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone result = new Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone();
            result.CommandId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.EntityId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.LoginCellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.NewCellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Commands.ChangeLoginCellphone), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Dtos_CheckPasswordResultSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Dtos_CheckPasswordResultSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult input = ((Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Cellphone, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.RemainCount, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Success, stream, typeof(bool));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserExist, stream, typeof(bool));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserId, stream, typeof(System.Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult result = new Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult();
            result.Cellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.RemainCount = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.Success = ((bool)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(bool), stream)));
            result.UserExist = ((bool)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(bool), stream)));
            result.UserId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckPasswordResult), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Dtos_BindInfoSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Dtos_BindInfoSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo input = ((Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo)(original));
            Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo result = new Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Flag = input.Flag;
            result.OpenId = input.OpenId;
            result.UserIdentifier = input.UserIdentifier;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo input = ((Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Flag, stream, typeof(int));
            Orleans.Serialization.SerializationManager.SerializeInner(input.OpenId, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserIdentifier, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo result = new Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo();
            result.Flag = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            result.OpenId = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.UserIdentifier = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Dtos.BindInfo), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Commands_UserRegisterSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Commands_UserRegisterSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister input = ((Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Cellphone, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ClientType, stream, typeof(long));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.ContractId, stream, typeof(long));
            Orleans.Serialization.SerializationManager.SerializeInner(input.EntityId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Info, stream, typeof(System.Collections.Generic.Dictionary<System.String,System.Object>));
            Orleans.Serialization.SerializationManager.SerializeInner(input.InviteBy, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.InviteFor, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.OutletCode, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Password, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserId, stream, typeof(System.Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister result = new Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister();
            result.Cellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.ClientType = ((long)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(long), stream)));
            result.CommandId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.ContractId = ((long)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(long), stream)));
            result.EntityId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.Info = ((System.Collections.Generic.Dictionary<System.String,System.Object>)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Collections.Generic.Dictionary<System.String,System.Object>), stream)));
            result.InviteBy = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.InviteFor = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.OutletCode = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Password = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.UserId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Commands.UserRegister), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Commands_ResetCellphoneSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Commands_ResetCellphoneSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone input = ((Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.EntityId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Messager, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.NewCellphone, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone result = new Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone();
            result.CommandId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.EntityId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.Messager = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.NewCellphone = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Commands.ResetCellphone), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Commands_ResetLoginPasswordSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Commands_ResetLoginPasswordSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword input = ((Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.EntityId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Password, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Salt, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserId, stream, typeof(System.Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword result = new Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword();
            result.CommandId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.EntityId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.Password = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Salt = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.UserId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Commands.ResetLoginPassword), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Commands_SetLoginPasswordSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Commands_SetLoginPasswordSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            return original;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword input = ((Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.CommandId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.EntityId, stream, typeof(System.Guid));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Password, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Salt, stream, typeof(string));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserId, stream, typeof(System.Guid));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword result = new Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword();
            result.CommandId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.EntityId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            result.Password = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.Salt = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            result.UserId = ((System.Guid)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(System.Guid), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Commands.SetLoginPassword), DeepCopier, Serializer, Deserializer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.10.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class Jinyinmao_AuthManager_Domain_Interface_Dtos_CheckCellphoneResultSerialization
    {
        
        static Jinyinmao_AuthManager_Domain_Interface_Dtos_CheckCellphoneResultSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult input = ((Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult)(original));
            Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult result = new Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Result = input.Result;
            result.UserIdentifier = input.UserIdentifier;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult input = ((Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Result, stream, typeof(bool));
            Orleans.Serialization.SerializationManager.SerializeInner(input.UserIdentifier, stream, typeof(string));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult result = new Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult();
            result.Result = ((bool)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(bool), stream)));
            result.UserIdentifier = ((string)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(string), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(Jinyinmao.AuthManager.Domain.Interface.Dtos.CheckCellphoneResult), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 414
#pragma warning restore 649
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
